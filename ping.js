// Generated by CoffeeScript 1.3.1
(function() {
  var EventEmitter, child, events, _, _s,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  events = require('events');

  child = require('child_process');

  _s = require('underscore.string');

  _ = require('underscore');

  EventEmitter = events.EventEmitter;

  module.exports = (function(_super) {

    __extends(exports, _super);

    exports.name = 'exports';

    function exports(target, options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      this.options = _.extend(options, {
        count: 10
      });
      this.num = 0;
      this.spawn = child.spawn('ping', [target, "-c " + this.options.count]);
      this.spawn.stdout.on('data', function(data) {
        return _this.data(data);
      });
    }

    exports.prototype.data = function(str) {
      var clean, line, lines, match, regex, _i, _len, _results;
      lines = _s.lines(str);
      clean = _s.clean(str);
      if (lines.length > 1) {
        _results = [];
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          line = lines[_i];
          _results.push(this.data(line));
        }
        return _results;
      } else {
        regex = /^(\d+) bytes from (.*?): icmp_[rs]eq=(\d+) ttl=(\d+) time=([\d\.]+) ms$/;
        match = clean.match(regex);
        if (!match) {
          regex = /^(\d+) packets transmitted, (\d+) received, (\d+)% packet loss, time (\d+)ms$/;
          match = clean.match(regex);
          if (match) {
            return this.emit('exit', {
              sent: +match[1],
              recieved: +match[2],
              loss: +match[3],
              time: +match[4]
            });
          }
        } else {
          return this.emit('data', {
            no: ++this.num,
            bytes: +match[1],
            time: +match[4],
            ttl: +match[3]
          });
        }
      }
    };

    return exports;

  })(EventEmitter);

}).call(this);
